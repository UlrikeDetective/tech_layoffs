{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8907976,"sourceType":"datasetVersion","datasetId":4363856}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"Praktice with sunburst charts and treemap charts on the tech layoffs dataset.\n\nLet's explore!","metadata":{}},{"cell_type":"code","source":"# Loading dataframe\nimport pandas as pd\n\ndf = pd.read_csv('/kaggle/input/tech-layoffs-2020-2024/tech_layoffs_Q2_2024.csv')\n\n# Display the first few rows of the DataFrame\ndisplay(df.head())\n\n# Display the DataFrame information\ndisplay(df.info(verbose=True))","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-07-08T17:15:21.418230Z","iopub.execute_input":"2024-07-08T17:15:21.418641Z","iopub.status.idle":"2024-07-08T17:15:21.472346Z","shell.execute_reply.started":"2024-07-08T17:15:21.418607Z","shell.execute_reply":"2024-07-08T17:15:21.471104Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Let`s start with the sunburst and treemap charts\n\nThe following code creates a DataFrame that shows how many times each combination of Country and Location_HQ appears in the original DataFrame df. The result will include three columns: Country, Location_HQ, and size (the count of occurrences for each combination).","metadata":{}},{"cell_type":"code","source":"gr_cat = df[[\"Country\",\n             \"Location_HQ\"]].groupby([\"Country\",\n                                       \"Location_HQ\"], as_index=False).size()","metadata":{"execution":{"iopub.status.busy":"2024-07-08T17:21:35.148436Z","iopub.execute_input":"2024-07-08T17:21:35.149195Z","iopub.status.idle":"2024-07-08T17:21:35.163258Z","shell.execute_reply.started":"2024-07-08T17:21:35.149143Z","shell.execute_reply":"2024-07-08T17:21:35.161746Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Sunburst Chart**\n\nThis code imports the plotly.express library and uses it to create a sunburst chart from the DataFrame gr_cat. The chart is configured to show the hierarchy of tech layoffs by country and location headquarters, with the size of each segment representing the number of layoffs. Each segment is colored according to its country. The chart is set to a width of 1280 pixels and a height of 800 pixels, and it has a custom title: \"Locations of tech layoffs by location HQ and countries (cities in total number)\". The layout of the chart is further customized by adjusting the font size and margins. The trace information is updated to display both the label and the percentage of the parent segment. Finally, the chart is displayed on the screen using fig.show().","metadata":{}},{"cell_type":"code","source":"import plotly.express as px\n\nfig = px.sunburst(gr_cat, width=1280, height=800,\n                  path=[\"Country\",\"Location_HQ\"], values=\"size\",\n                  color=\"Country\",\n                  title=\"<span style='font-size:18px;'><b>Locations of tech layoffs by location HQ and countries (cities in total number)</b></span><b></b>\"\n                  )\nfig.update_layout(font_size=10, margin=dict(l=10, r=10, t=30, b=50))\nfig.update_traces(textinfo=\"label+percent parent\")\nfig.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-08T17:22:02.290646Z","iopub.execute_input":"2024-07-08T17:22:02.291072Z","iopub.status.idle":"2024-07-08T17:22:05.484834Z","shell.execute_reply.started":"2024-07-08T17:22:02.291038Z","shell.execute_reply":"2024-07-08T17:22:05.483727Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"65% of the entries in the dataset were reports of layoffs in the USA. And of all the USA reports in the dataset are 26% percents of layoffs in San Francisco and 17 % in New York City. ","metadata":{}},{"cell_type":"markdown","source":"**Treemap charts**\n\nThis code imports the pandas and plotly.express libraries and shows the same data as above and the second treemap filters the DataFrame gr_cat to include only rows where the country is the USA, storing the result in usa_df. It then creates a treemap from this filtered DataFrame, setting the width to 1280 pixels and the height to 800 pixels. The treemap displays the hierarchy based on Country and Location_HQ, with each segment sized according to the size column and colored by Location_HQ. The trace information is updated to show both the label and the percentage of the parent segment. Finally, the treemap is displayed using fig.show().\n\n","metadata":{}},{"cell_type":"code","source":"fig = px.treemap(gr_cat, width=1280, height=800,\n                 path=[\"Country\",\"Location_HQ\"], values='size',\n                 color='Country')\nfig.update_traces(textinfo=\"label+percent parent\")\nfig.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-08T17:31:44.480467Z","iopub.execute_input":"2024-07-08T17:31:44.480947Z","iopub.status.idle":"2024-07-08T17:31:44.608576Z","shell.execute_reply.started":"2024-07-08T17:31:44.480912Z","shell.execute_reply":"2024-07-08T17:31:44.607383Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"What chart do you like more sunburst or treemap for this data?\n\nLet's do a treemap charts with only locations in the USA.","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport plotly.express as px\n\n# Filter the DataFrame for rows where Country is USA\nusa_df = gr_cat[gr_cat['Country'] == 'USA']\n\n# Create the treemap using the filtered DataFrame\nfig = px.treemap(usa_df, width=1280, height=800,\n                 path=[\"Country\", \"Location_HQ\"], values='size',\n                 color='Location_HQ')\nfig.update_traces(textinfo=\"label+percent parent\")\nfig.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-08T17:28:54.900935Z","iopub.execute_input":"2024-07-08T17:28:54.901330Z","iopub.status.idle":"2024-07-08T17:28:55.064827Z","shell.execute_reply.started":"2024-07-08T17:28:54.901299Z","shell.execute_reply":"2024-07-08T17:28:55.063821Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Let's use more filter functions for the treemap chart.\n\nFilter is now the column state with the entry California.","metadata":{}},{"cell_type":"code","source":"st_cat = df[[\"State\",\n             \"Location_HQ\"]].groupby([\"State\",\n                                       \"Location_HQ\"], as_index=False).size()\n\nimport pandas as pd\nimport plotly.express as px\n\n\nCa_df = st_cat[st_cat['State'] == 'California']\n\n# Create the treemap using the filtered DataFrame\nfig = px.treemap(Ca_df, width=1280, height=800,\n                 path=[\"State\", \"Location_HQ\"], values='size',\n                 color='Location_HQ')\nfig.update_traces(textinfo=\"label+percent parent\")\nfig.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-08T17:37:25.617111Z","iopub.execute_input":"2024-07-08T17:37:25.617541Z","iopub.status.idle":"2024-07-08T17:37:25.721123Z","shell.execute_reply.started":"2024-07-08T17:37:25.617506Z","shell.execute_reply":"2024-07-08T17:37:25.720009Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"And finally the filter for the region = San Francisco Bay Area.","metadata":{}},{"cell_type":"code","source":"re_cat = df[[\"Region\",\n             \"Location_HQ\"]].groupby([\"Region\",\n                                       \"Location_HQ\"], as_index=False).size()\n\nimport pandas as pd\nimport plotly.express as px\n\n\nSF_df = re_cat[re_cat['Region'] == 'San Francisco Bay Area']\n\n# Create the treemap using the filtered DataFrame\nfig = px.treemap(SF_df, width=1280, height=800,\n                 path=[\"Region\", \"Location_HQ\"], values='size',\n                 color='Location_HQ')\nfig.update_traces(textinfo=\"label+percent parent\")\nfig.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-08T17:38:29.146096Z","iopub.execute_input":"2024-07-08T17:38:29.146961Z","iopub.status.idle":"2024-07-08T17:38:29.254120Z","shell.execute_reply.started":"2024-07-08T17:38:29.146924Z","shell.execute_reply":"2024-07-08T17:38:29.252851Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"","metadata":{}}]}